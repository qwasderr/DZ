#include<iostream>
#include<chrono>
using namespace std;

int main() {
	using namespace std::chrono;
	int a1 = 7645, a2 = 53415, a3 = 43512, a4 = 1254, a5 = 67554, a6 = 74747, a7 = 7122, a8 = 54321, a9 = 6251, a10 = 5142, a11 = 78234, a12 = 9123, a13 = 70942, a14 = 18231, a15 = 79120, a16 = 43251, a17 = 56172, a18 = 6712, a19 = 8147, a20 = 23675, a21 = 5647;
	long long start1 = 0, b1 = 17848397123574, b2 = 45619583742954, b3 = 91025712815634, b4 = 75840392184736, b5 = 31268439210647, b6 = 81924738658195, b7 = 88147256849567, b8 = 9128471563765, b9 = 16437586718294, b10 = 71836298175372, b11 = 81267548329186, b12 = 56172458674921, b13 = 76584371568730, b14 = 17583956742863, b15 = 71867529506728, b16 = 17536245681768, b17 = 17548657269783, b18 = 74364827569480, b19 = 17583728680472, b20 = 57320167582095;
	float start2 = 0, c1 = 784962.89f, c2 = 285943.7389f, c3 = 194572.456f, c4 = 516307.362f, c5 = 418256.723f, c6 = 321824.412f, c7 = 612563.51f, c8 = 165284.534f, c9 = 427346.612f, c10 = 614256.718f, c11 = 157325.512f, c12 = 416527.23f, c13 = 518523.571f, c14 = 612732.412f, c15 = 632134.12f, c16 = 412312.56f, c17 = 417234.514f, c18 = 164824.125f, c19 = 546125.715f, c20 = 186593.476f;
	double start3 = 0, d1 = 793271456.475, d2 = 812964374.5185, d3 = 581493275.123, d4 = 175842963.324, d5 = 671854683.567, d6 = 714573485.154, d7 = 674196437.516, d8 = 718537296.41645, d9 = 719643852.456, d10 = 517439256.376, d11 = 174839652.15647, d12 = 561853461.15436, d13 = 257146375.16345, d14 = 618367315.1564, d15 = 718543724.1563, d16 = 362415743.3574, d17 = 436175463.56742, d18 = 561235738.48145, d19 = 675418432.1345, d20 = 185473465.1264;
	time_point<high_resolution_clock> st, end;
	duration<float> time;
	double mas[30];
	int pos = 0;
	const long long count = 100000000;
	const long long counta = 250000000;
	const long long countd = 30000000;
	st = high_resolution_clock::now();
	for (long i = 0; i < count; ++i) {
		a1 = 7645, a2 = 53415, a3 = 43512, a4 = 1254, a5 = 67554, a6 = 74747, a7 = 7122, a8 = 54321, a9 = 6251, a10 = 5142, a11 = 78234, a12 = 9123, a13 = 70942, a14 = 18231, a15 = 79120, a16 = 43251, a17 = 56172, a18 = 6712, a19 = 8147, a20 = 23675, a21 = 5647;

		a1 = a2;
		a2 = a3;
		a3 = a4;
		a4 = a5;
		a5 = a6;
		a6 = a7;
		a7 = a8;
		a8 = a9;
		a9 = a10;
		a10 = a11;
		a11 = a12;
		a12 = a13;
		a13 = a14;
		a14 = a15;
		a15 = a16;
		a16 = a17;
		a17 = a18;
		a18 = a19;
		a19 = a20;
		a20 = a1;

	}
	end = high_resolution_clock::now();
	time = end - st;
	double loop = time.count();

	//int add
	st = high_resolution_clock::now();
	for (long i = 0; i < counta; ++i) {
		a1 = 7645, a2 = 53415, a3 = 43512, a4 = 1254, a5 = 67554, a6 = 74747, a7 = 7122, a8 = 54321, a9 = 6251, a10 = 5142, a11 = 78234, a12 = 9123, a13 = 70942, a14 = 18231, a15 = 79120, a16 = 43251, a17 = 56172, a18 = 6712, a19 = 8147, a20 = 23675, a21 = 5647;

		a1 = a2 + a3;
		a2 = a1 + a4;
		a3 = a2 + a5;
		a4 = a3 + a6;
		a5 = a4 + a7;
		a6 = a5 + a8;
		a7 = a6 + a9;
		a8 = a7 + a10;
		a9 = a8 + a11;
		a10 = a9 + a12;
		a11 = a10 + a13;
		a12 = a11 + a14;
		a13 = a12 + a15;
		a14 = a13 + a16;
		a15 = a14 + a17;
		a16 = a15 + a18;
		a17 = a16 + a19;
		a18 = a17 + a20;
		a19 = a18 + a20;
		a20 = a19 + a1;
	}
	end = high_resolution_clock::now();
	time = end - st;

	mas[pos] = (20 * counta) / (time.count() - loop * (counta / count));
	++pos;

	//int subtract.
	st = high_resolution_clock::now();
	for (long i = 0; i < counta; ++i) {
		a1 = 7645, a2 = 53415, a3 = 43512, a4 = 1254, a5 = 67554, a6 = 74747, a7 = 7122, a8 = 54321, a9 = 6251, a10 = 5142, a11 = 78234, a12 = 9123, a13 = 70942, a14 = 18231, a15 = 79120, a16 = 43251, a17 = 56172, a18 = 6712, a19 = 8147, a20 = 23675, a21 = 5647;

		a1 = a2 - a3;
		a2 = a1 - a4;
		a3 = a2 - a5;
		a4 = a3 - a6;
		a5 = a4 - a7;
		a6 = a5 - a8;
		a7 = a6 - a9;
		a8 = a7 - a10;
		a9 = a8 - a11;
		a10 = a9 - a12;
		a11 = a10 - a13;
		a12 = a11 - a14;
		a13 = a12 - a15;
		a14 = a13 - a16;
		a15 = a14 - a17;
		a16 = a15 - a18;
		a17 = a16 - a19;
		a18 = a17 - a20;
		a19 = a18 - a20;
		a20 = a19 - a1;
	}
	end = high_resolution_clock::now();
	time = end - st;
	mas[pos] = (20 * counta) / (time.count() - loop * (counta / count)); ++pos;
	

	//int mult
	st = high_resolution_clock::now();
	for (long i = 0; i < count; ++i) {
		a1 = 7645, a2 = 53415, a3 = 43512, a4 = 1254, a5 = 67554, a6 = 74747, a7 = 7122, a8 = 54321, a9 = 6251, a10 = 5142, a11 = 78234, a12 = 9123, a13 = 70942, a14 = 18231, a15 = 79120, a16 = 43251, a17 = 56172, a18 = 6712, a19 = 8147, a20 = 23675, a21 = 5647;

		a1 = a2 * a3;
		a2 = a1 * a4;
		a3 = a2 * a5;
		a4 = a3 * a6;
		a5 = a4 * a7;
		a6 = a5 * a8;
		a7 = a6 * a9;
		a8 = a7 * a10;
		a9 = a8 * a11;
		a10 = a9 * a12;
		a11 = a10 * a13;
		a12 = a11 * a14;
		a13 = a12 * a15;
		a14 = a13 * a16;
		a15 = a14 * a17;
		a16 = a15 * a18;
		a17 = a16 * a19;
		a18 = a17 * a20;
		a19 = a20 * a1;
		a20 = a19 * a1;
	}
	end = high_resolution_clock::now();
	time = end - st;
	mas[pos] = (20 * count) / (time.count() - loop); ++pos;

	//int div
	st = high_resolution_clock::now();
	for (long i = 0; i < countd; ++i) {
		a1 = 7645, a2 = 53415, a3 = 43512, a4 = 1254, a5 = 67554, a6 = 74747, a7 = 7122, a8 = 54321, a9 = 6251, a10 = 5142, a11 = 78234, a12 = 9123, a13 = 70942, a14 = 18231, a15 = 79120, a16 = 43251, a17 = 56172, a18 = 6712, a19 = 8147, a20 = 23675, a21 = 5647;
		a1 = a2 / a3;
		a2 = a4 / a1;
		a3 = a5 / a2;
		a4 = a6 / a3;
		a5 = a7 / a4;
		a6 = a8 / a3;
		a7 = a9 / a6;
		a8 = a10 / a7;
		a9 = a11 / a8;
		a10 = a12 / a9;
		a11 = a13 / a10;
		a12 = a14 / a11;
		a13 = a15 / a12;
		a14 = a16 / a13;
		a15 = a17 / a14;
		a16 = a18 / a15;
		a17 = a19 / a16;
		a18 = a20 / a17;
		a19 = a6 / a1;
		a20 = a7 / a1;
	}
	end = high_resolution_clock::now();
	time = end - st;
	mas[pos] = (20 * countd) / (time.count() - loop * (countd / count)); ++pos;


	/*st = high_resolution_clock::now();
		for (long i=0;i<count;++i){
		b1=17848397123574, b2=45619583742954, b3=91025712815634, b4=75840392184736, b5=31268439210647, b6=81924738658195, b7=88147256849567, b8=91284715637654, b9=16437586718294, b10=71836298175372, b11=81267548329186, b12=56172458674921, b13=76584371568730, b14=17583956742863, b15=71867529506728, b16=17536245681768, b17=17548657269783, b18=74364827569480, b19=17583728680472, b20=57320167582095;

		b1=b2;
		b2=b3;
		b3=b4;
		b4=b5;
		b5=b6;
		b6=b7;
		b7=b8;
		b8=b9;
		b9=b10;
		b10=b11;
		b11=b12;
		b12=b13;
		b13=b14;
		b14=b15;
		b15=b16;
		b16=b17;
		b17=b18;
		b18=b19;
		b19=b20;
		b20=b1;

		}
		end=high_resolution_clock::now();
		time=end-st;
		loop=time.count();
		cout<<loop<<endl;*/

	//long add
	st = high_resolution_clock::now();
	for (long i = 0; i < count; ++i) {
		b1 = 17848397123574, b2 = 45619583742954, b3 = 91025712815634, b4 = 75840392184736, b5 = 31268439210647, b6 = 81924738658195, b7 = 88147256849567, b8 = 9128471563765, b9 = 16437586718294, b10 = 71836298175372, b11 = 81267548329186, b12 = 56172458674921, b13 = 76584371568730, b14 = 17583956742863, b15 = 71867529506728, b16 = 17536245681768, b17 = 17548657269783, b18 = 74364827569480, b19 = 17583728680472, b20 = 57320167582095;

		b1 = b2 + b3;
		b2 = b1 + b4;
		b3 = b2 + b5;
		b4 = b3 + b6;
		b5 = b4 + b7;
		b6 = b5 + b8;
		b7 = b6 + b9;
		b8 = b7 + b10;
		b9 = b8 + b11;
		b10 = b9 + b12;
		b11 = b10 + b13;
		b12 = b11 + b14;
		b13 = b12 + b15;
		b14 = b13 + b16;
		b15 = b14 + b17;
		b16 = b15 + b18;
		b17 = b16 + b19;
		b18 = b17 + b20;
		b19 = b20 + b1;
		b20 = b19 + b1;
	}
	end = high_resolution_clock::now();
	time = end - st;

	mas[pos] = (20 * count) / (time.count() - loop);
	++pos;


	//long subtract.
	st = high_resolution_clock::now();
	for (long i = 0; i < count; ++i) {
		b1 = 17848397123574, b2 = 45619583742954, b3 = 91025712815634, b4 = 75840392184736, b5 = 31268439210647, b6 = 81924738658195, b7 = 88147256849567, b8 = 9128471563765, b9 = 16437586718294, b10 = 71836298175372, b11 = 81267548329186, b12 = 56172458674921, b13 = 76584371568730, b14 = 17583956742863, b15 = 71867529506728, b16 = 17536245681768, b17 = 17548657269783, b18 = 74364827569480, b19 = 17583728680472, b20 = 57320167582095;

		b1 = b2 - b3;
		b2 = b1 - b4;
		b3 = b2 - b5;
		b4 = b3 - b6;
		b5 = b4 - b7;
		b6 = b5 - b8;
		b7 = b6 - b9;
		b8 = b7 - b10;
		b9 = b8 - b11;
		b10 = b9 - b12;
		b11 = b10 - b13;
		b12 = b11 - b14;
		b13 = b12 - b15;
		b14 = b13 - b16;
		b15 = b14 - b17;
		b16 = b15 - b18;
		b17 = b16 - b19;
		b18 = b17 - b20;
		b19 = b20 - b1;
		b20 = b19 - b1;
	}
	end = high_resolution_clock::now();
	time = end - st;
	mas[pos] = (20 * count) / (time.count() - loop); ++pos;


	//long mult
	st = high_resolution_clock::now();
	for (long i = 0; i < count; ++i) {
		b1 = 17848397123574, b2 = 45619583742954, b3 = 91025712815634, b4 = 75840392184736, b5 = 31268439210647, b6 = 81924738658195, b7 = 88147256849567, b8 = 9128471563765, b9 = 16437586718294, b10 = 71836298175372, b11 = 81267548329186, b12 = 56172458674921, b13 = 76584371568730, b14 = 17583956742863, b15 = 71867529506728, b16 = 17536245681768, b17 = 17548657269783, b18 = 74364827569480, b19 = 17583728680472, b20 = 57320167582095;

		b1 = b2 * b3;
		b2 = b1 * b4;
		b3 = b2 * b5;
		b4 = b3 * b6;
		b5 = b4 * b7;
		b6 = b5 * b8;
		b7 = b6 * b9;
		b8 = b7 * b10;
		b9 = b8 * b11;
		b10 = b9 * b12;
		b11 = b10 * b13;
		b12 = b11 * b14;
		b13 = b12 * b15;
		b14 = b13 * b16;
		b15 = b14 * b17;
		b16 = b15 * b18;
		b17 = b16 * b19;
		b18 = b17 * b20;
		b19 = b20 * b1;
		b20 = b19 * b1;
	}
	end = high_resolution_clock::now();
	time = end - st;
	mas[pos] = (20 * count) / (time.count() - loop); ++pos;


	//long div
	st = high_resolution_clock::now();
	for (long i = 0; i < countd; ++i) {
		b1 = 17848397123574, b2 = 45619583742954, b3 = 91025712815634, b4 = 75840392184736, b5 = 31268439210647, b6 = 81924738658195, b7 = 88147256849567, b8 = 9128471563765, b9 = 16437586718294, b10 = 71836298175372, b11 = 81267548329186, b12 = 56172458674921, b13 = 76584371568730, b14 = 17583956742863, b15 = 71867529506728, b16 = 17536245681768, b17 = 17548657269783, b18 = 74364827569480, b19 = 17583728680472, b20 = 57320167582095;
		b1 = b3 / b2;
		b2 = b4 / b1;
		b3 = b2 / b5;
		b4 = b6 / b3;
		b5 = b7 / b4;
		b6 = b8 / b5;
		//b6 = b4 / b3;
		b7 = b9 / b6;
		b8 = b10 / b7;
		b9 = b11 / b8;
		b10 = b12 / b9;
		b11 = b13 / b10;
		b12 = b14 / b11;
		b13 = b15 / b12;
		b14 = b16 / b13;
		b15 = b17 / b14;
		b16 = b18 / b15;
		b17 = b19 / b16;
		b18 = b20 / b17;
		b19 = b5 / b1;
		b20 = b6 / b1;
	}
	end = high_resolution_clock::now();
	time = end - st;
	mas[pos] = (20 * countd) / (time.count() - loop * (countd / count)); ++pos;



	/*st = high_resolution_clock::now();
		for (long i=0;i<count;++i){
		c1=784962.89f, c2=285943.7389f, c3=194572.456f, c4=516307.362f, c5=418256.723f, c6=321824.412f, c7=612563.51f, c8=165284.534f, c9=427346.612f, c10=614256.718f, c11=157325.512f, c12=416527.23f, c13=518523.571f, c14=612732.412f, c15=632134.12f, c16=412312.56f, c17=417234.514f, c18=164824.125f, c19=546125.715f, c20=186593.476f;

		c1=c2;
		c2=c3;
		c3=c4;
		c4=c5;
		c5=c6;
		c6=c7;
		c7=c8;
		c8=c9;
		c9=c10;
		c10=c11;
		c11=c12;
		c12=c13;
		c13=c14;
		c14=c15;
		c15=c16;
		c16=c17;
		c17=c18;
		c18=c19;
		c19=c20;
		c20=c1;

		}
		end=high_resolution_clock::now();
		time=end-st;
		loop=time.count();
		cout<<loop<<endl;*/



	//float add
	st = high_resolution_clock::now();
	for (long i = 0; i < count; ++i) {
		c1 = 784962.89f, c2 = 285943.7389f, c3 = 194572.456f, c4 = 516307.362f, c5 = 418256.723f, c6 = 321824.412f, c7 = 612563.51f, c8 = 165284.534f, c9 = 427346.612f, c10 = 614256.718f, c11 = 157325.512f, c12 = 416527.23f, c13 = 518523.571f, c14 = 612732.412f, c15 = 632134.12f, c16 = 412312.56f, c17 = 417234.514f, c18 = 164824.125f, c19 = 546125.715f, c20 = 186593.476f;

		c1 = c2 + c3;
		c2 = c1 + c4;
		c3 = c2 + c5;
		c4 = c3 + c6;
		c5 = c4 + c7;
		c6 = c5 + c8;
		c7 = c6 + c9;
		c8 = c7 + c10;
		c9 = c8 + c11;
		c10 = c9 + c12;
		c11 = c10 + c13;
		c12 = c11 + c14;
		c13 = c12 + c15;
		c14 = c13 + c16;
		c15 = c14 + c17;
		c16 = c15 + c18;
		c17 = c16 + c19;
		c18 = c17 + c20;
		c19 = c20 + c1;
		c20 = c19 + c1;
	}
	end = high_resolution_clock::now();
	time = end - st;

	mas[pos] = (20 * count) / (time.count() - loop);
	++pos;

	//float subtract.
	st = high_resolution_clock::now();
	for (long i = 0; i < count; ++i) {
		c1 = 784962.89f, c2 = 285943.7389f, c3 = 194572.456f, c4 = 516307.362f, c5 = 418256.723f, c6 = 321824.412f, c7 = 612563.51f, c8 = 165284.534f, c9 = 427346.612f, c10 = 614256.718f, c11 = 157325.512f, c12 = 416527.23f, c13 = 518523.571f, c14 = 612732.412f, c15 = 632134.12f, c16 = 412312.56f, c17 = 417234.514f, c18 = 164824.125f, c19 = 546125.715f, c20 = 186593.476f;

		c1 = c2 - c3;
		c2 = c1 - c4;
		c3 = c2 - c5;
		c4 = c3 - c6;
		c5 = c4 - c7;
		c6 = c5 - c8;
		c7 = c6 - c9;
		c8 = c7 - c10;
		c9 = c8 - c11;
		c10 = c9 - c12;
		c11 = c10 - c13;
		c12 = c11 - c14;
		c13 = c12 - c15;
		c14 = c13 - c16;
		c15 = c14 - c17;
		c16 = c15 - c18;
		c17 = c16 - c19;
		c18 = c17 - c20;
		c19 = c20 - c1;
		c20 = c19 - c1;
	}
	end = high_resolution_clock::now();
	time = end - st;
	mas[pos] = (20 * count) / (time.count() - loop); ++pos;


	//float mult
	st = high_resolution_clock::now();
	for (long i = 0; i < count; ++i) {
		c1 = 784962.89f, c2 = 285943.7389f, c3 = 194572.456f, c4 = 516307.362f, c5 = 418256.723f, c6 = 321824.412f, c7 = 612563.51f, c8 = 165284.534f, c9 = 427346.612f, c10 = 614256.718f, c11 = 157325.512f, c12 = 416527.23f, c13 = 518523.571f, c14 = 612732.412f, c15 = 632134.12f, c16 = 412312.56f, c17 = 417234.514f, c18 = 164824.125f, c19 = 546125.715f, c20 = 186593.476f;

		c1 = c2 * c3;
		c2 = c1 * c4;
		c3 = c2 * c5;
		c4 = c3 * c6;
		c5 = c4 * c7;
		c6 = c5 * c8;
		c7 = c6 * c9;
		c8 = c7 * c10;
		c9 = c8 * c11;
		c10 = c9 * c12;
		c11 = c10 * c13;
		c12 = c11 * c14;
		c13 = c12 * c15;
		c14 = c13 * c16;
		c15 = c14 * c17;
		c16 = c15 * c18;
		c17 = c16 * c19;
		c18 = c17 * c20;
		c19 = c20 * c1;
		c20 = c19 * c1;
	}
	end = high_resolution_clock::now();
	time = end - st;
	mas[pos] = (20 * count) / (time.count() - loop); ++pos;
	

	//float div
	st = high_resolution_clock::now();
	for (long i = 0; i < countd; ++i) {
		c1 = 784962.89f, c2 = 285943.7389f, c3 = 194572.456f, c4 = 516307.362f, c5 = 418256.723f, c6 = 321824.412f, c7 = 612563.51f, c8 = 165284.534f, c9 = 427346.612f, c10 = 614256.718f, c11 = 157325.512f, c12 = 416527.23f, c13 = 518523.571f, c14 = 612732.412f, c15 = 632134.12f, c16 = 412312.56f, c17 = 417234.514f, c18 = 164824.125f, c19 = 546125.715f, c20 = 186593.476f;
		c1 = c3 / c2;
		c2 = c4 / c1;
		c3 = c2 / c5;
		c4 = c6 / c3;
		c5 = c7 / c4;
		c6 = c8 / c5;
		c7 = c9 / c6;
		c8 = c10 / c7;
		c9 = c11 / c8;
		c10 = c12 / c9;
		c11 = c13 / c10;
		c12 = c14 / c11;
		c13 = c15 / c12;
		c14 = c16 / c13;
		c15 = c17 / c14;
		c16 = c18 / c15;
		c17 = c19 / c16;
		c18 = c20 / c17;
		c19 = c6 / c1;
		c20 = c5 / c1;
	}
	end = high_resolution_clock::now();
	time = end - st;
	mas[pos] = (20 * countd) / (time.count() - loop * (countd / count)); ++pos;

	/*st = high_resolution_clock::now();
		for (long i=0;i<count;++i){
		d1=793271456.475, d2=812964374.5185, d3=581493275.123, d4=175842963.324, d5=671854683.567, d6=714573485.154, d7=674196437.516, d8=718537296.41645, d9=719643852.456, d10=517439256.376, d11=174839652.15647, d12=561853461.15436, d13=257146375.16345, d14=618367315.1564, d15=718543724.1563, d16=362415743.3574, d17=436175463.56742, d18=561235738.48145, d19=675418432.1345, d20=185473465.1264;

		d1=d2;
		d2=d3;
		d3=d4;
		d4=d5;
		d5=d6;
		d6=d7;
		d7=d8;
		d8=d9;
		d9=d10;
		d10=d11;
		d11=d12;
		d12=d13;
		d13=d14;
		d14=d15;
		d15=d16;
		d16=d17;
		d17=d18;
		d18=d19;
		d19=d20;
		d20=d1;

		}
		end=high_resolution_clock::now();
		time=end-st;
		loop=time.count();
		cout<<loop<<endl;*/


	//double add
	st = high_resolution_clock::now();
	for (long i = 0; i < count; ++i) {
		d1 = 793271456.475, d2 = 812964374.5185, d3 = 581493275.123, d4 = 175842963.324, d5 = 671854683.567, d6 = 714573485.154, d7 = 674196437.516, d8 = 718537296.41645, d9 = 719643852.456, d10 = 517439256.376, d11 = 174839652.15647, d12 = 561853461.15436, d13 = 257146375.16345, d14 = 618367315.1564, d15 = 718543724.1563, d16 = 362415743.3574, d17 = 436175463.56742, d18 = 561235738.48145, d19 = 675418432.1345, d20 = 185473465.1264;
		d1 = d2 + d3;
		d2 = d1 + d4;
		d3 = d2 + d5;
		d4 = d3 + d6;
		d5 = d4 + d7;
		d6 = d5 + d8;
		d7 = d6 + d9;
		d8 = d7 + d10;
		d9 = d8 + d11;
		d10 = d9 + d12;
		d11 = d10 + d13;
		d12 = d11 + d14;
		d13 = d12 + d15;
		d14 = d13 + d16;
		d15 = d14 + d17;
		d16 = d15 + d18;
		d17 = d16 + d19;
		d18 = d17 + d20;
		d19 = d20 + d1;
		d20 = d19 + d1;
	}
	end = high_resolution_clock::now();
	time = end - st;

	mas[pos] = (20 * count) / (time.count() - loop);
	++pos;


	//double subtract.
	st = high_resolution_clock::now();
	for (long i = 0; i < count; ++i) {
		d1 = 793271456.475, d2 = 812964374.5185, d3 = 581493275.123, d4 = 175842963.324, d5 = 671854683.567, d6 = 714573485.154, d7 = 674196437.516, d8 = 718537296.41645, d9 = 719643852.456, d10 = 517439256.376, d11 = 174839652.15647, d12 = 561853461.15436, d13 = 257146375.16345, d14 = 618367315.1564, d15 = 718543724.1563, d16 = 362415743.3574, d17 = 436175463.56742, d18 = 561235738.48145, d19 = 675418432.1345, d20 = 185473465.1264;

		d1 = d2 - d3;
		d2 = d1 - d4;
		d3 = d2 - d5;
		d4 = d3 - d6;
		d5 = d4 - d7;
		d6 = d5 - d8;
		d7 = d6 - d9;
		d8 = d7 - d10;
		d9 = d8 - d11;
		d10 = d9 - d12;
		d11 = d10 - d13;
		d12 = d11 - d14;
		d13 = d12 - d15;
		d14 = d13 - d16;
		d15 = d14 - d17;
		d16 = d15 - d18;
		d17 = d16 - d19;
		d18 = d17 - d20;
		d19 = d20 - d1;
		d20 = d19 - d1;
	}
	end = high_resolution_clock::now();
	time = end - st;
	mas[pos] = (20 * count) / (time.count() - loop); ++pos;


	//double mult
	st = high_resolution_clock::now();
	for (long i = 0; i < count; ++i) {
		d1 = 793271456.475, d2 = 812964374.5185, d3 = 581493275.123, d4 = 175842963.324, d5 = 671854683.567, d6 = 714573485.154, d7 = 674196437.516, d8 = 718537296.41645, d9 = 719643852.456, d10 = 517439256.376, d11 = 174839652.15647, d12 = 561853461.15436, d13 = 257146375.16345, d14 = 618367315.1564, d15 = 718543724.1563, d16 = 362415743.3574, d17 = 436175463.56742, d18 = 561235738.48145, d19 = 675418432.1345, d20 = 185473465.1264;

		d1 = d2 * d3;
		d2 = d1 * d4;
		d3 = d2 * d5;
		d4 = d3 * d6;
		d5 = d4 * d7;
		d6 = d5 * d8;
		d7 = d6 * d9;
		d8 = d7 * d10;
		d9 = d8 * d11;
		d10 = d9 * d12;
		d11 = d10 * d13;
		d12 = d11 * d14;
		d13 = d12 * d15;
		d14 = d13 * d16;
		d15 = d14 * d17;
		d16 = d15 * d18;
		d17 = d16 * d19;
		d18 = d17 * d20;
		d19 = d20 * d1;
		d20 = d19 * d1;
	}
	end = high_resolution_clock::now();
	time = end - st;
	mas[pos] = (20 * count) / (time.count() - loop); ++pos;


	//double div
	st = high_resolution_clock::now();
	for (long i = 0; i < countd; ++i) {
		d1 = 793271456.475, d2 = 812964374.5185, d3 = 581493275.123, d4 = 175842963.324, d5 = 671854683.567, d6 = 714573485.154, d7 = 674196437.516, d8 = 718537296.41645, d9 = 719643852.456, d10 = 517439256.376, d11 = 174839652.15647, d12 = 561853461.15436, d13 = 257146375.16345, d14 = 618367315.1564, d15 = 718543724.1563, d16 = 362415743.3574, d17 = 436175463.56742, d18 = 561235738.48145, d19 = 675418432.1345, d20 = 185473465.1264;
		d1 = d3 / d2;
		d2 = d4 / d1;
		d3 = d2 / d5;
		d4 = d6 / d3;
		d5 = d7 / d4;
		d6 = d8 / d5;
		d7 = d9 / d6;
		d8 = d10 / d7;
		d9 = d11 / d8;
		d10 = d12 / d9;
		d11 = d13 / d10;
		d12 = d14 / d11;
		d13 = d15 / d12;
		d14 = d16 / d13;
		d15 = d17 / d14;
		d16 = d18 / d15;
		d17 = d19 / d16;
		d18 = d20 / d17;
		d19 = d6 / d1;
		d20 = d5 / d1;
	}
	end = high_resolution_clock::now();
	time = end - st;
	mas[pos] = (20 * countd) / (time.count() - loop * (countd / count)); ++pos;

	double max = mas[0];
	int maxpos = 0;


	for (int g = 0; g < pos; ++g) {
		if (mas[g] > max) {
			max = mas[g];
			maxpos = g;
		}
	}


	for (int i = 0; i < 16; ++i) {
		switch (i % 4) {
		case 0:
			cout << "+   ";
			break;
		case 1:
			cout << "-   ";
			break;
		case 2:
			cout << "*   ";
			break;
		case 3:
			cout << "/   ";
			break;
		}
		switch (i / 4) {
		case 0:
			cout << "int     ";
			break;
		case 1:
			cout << "long    ";
			break;
		case 2:
			cout << "float   ";
			break;
		case 3:
			cout << "double  ";
			break;
		}
		printf("%e    ", mas[i]);
		for (int j = 0; j<round(45 * (mas[i] / mas[maxpos])); ++j) {
			cout << "X";
		};
		for (int j = 0; j < 45 - round(45 * (mas[i] / mas[maxpos])); ++j) {
			cout << " ";
		};
		cout << "   " << round((mas[i] / mas[maxpos]) * 100) << "%" << endl << endl;
	}



}